# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    env(MONGODB_URL): ''
    env(MONGODB_DB): ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    app.service_handler_storage_locator:
        class: Symfony\Component\DependencyInjection\ServiceLocator
        arguments:
            -
                b_iblock_section: '@App\Features\Section\Handler\SectionHandlerStorage'
                b_iblock_element: '@App\Features\Product\Handler\ProductHandlerStorage'
                etim_feature: '@App\Features\Properties\Property\Handler\PropertyHandlerStorage'
                etim_value: '@App\Features\Properties\PropertyValue\Handler\PropertyValueHandlerStorage'
                etim_unit: '@App\Features\Properties\PropertyUnit\Handler\PropertyUnitHandlerStorage'
                product_features: '@App\Features\ProductFeature\Handler\ProductFeatureHandlerStorage'

    map.product.mapper:
        class: 'App\Features\Product\Mapper\ProductMapper'

    map.section.mapper:
        class: 'App\Features\Section\Mapper\SectionMapper'

    map.property.mapper:
        class: 'App\Features\Properties\Property\Mapper\PropertyMapper'

    map.property.name.mapper:
        class: 'App\Features\Properties\PropertyName\Mapper\PropertyNameMapper'

    map.property.value.mapper:
        class: 'App\Features\Properties\PropertyValue\Mapper\PropertyValueMapper'

    App\Features\Properties\Property\Serializer\Denormalizer\PropertyMessageDTODenormalizer:
        tags: [ 'serializer.normalizer' ]

    App\Features\Properties\PropertyValue\Serializer\Denormalizer\PropertyValueMessageDTODenormalizer:
        tags: [ 'serializer.normalizer' ]

    App\Features\ProductFeature\Serializer\Denormalizer\ProductFeatureMessageDTODenormalizer:
        tags: [ 'serializer.normalizer' ]

    map.property.name.dto.denormalizer:
        class: 'App\Features\Properties\PropertyName\Serializer\Denormalizer\PropertyNameDTODenormalizer'
        tags: [ 'serializer.normalizer' ]